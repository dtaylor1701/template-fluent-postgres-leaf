openapi: '3.1.0'
info:
  title: GreetingService
  version: 1.0.0
servers:
  - url: https://example.com/api
    description: Example service deployment.
paths:
# User endpoints
  /users:
    post:
      operationId: createUser
      requestBody:
        description: Create a new user.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        '201':
          description: A success response with a new user token.
          content:
            application/json:
              schema: 
                $ref:  '#/components/schemas/UserToken'
  /login:
   post:
      operationId: loginUser
      requestBody:
        description: Login as a user.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '201':
          description: A success response with a new user token.
          content:
            application/json:
              schema: 
                $ref:   '#/components/schemas/UserToken'
# Todo endpoints
  /todos:
    get:
      operationId: getTodos
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: A success response with a list of todos.
          content:
            application/json:
              schema: 
                type: array 
                items:
                  $ref: '#/components/schemas/Todo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: createTodo
      security: 
        - bearerAuth: []
      requestBody:
        description: Create a new todo.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '201':
          description: A success response with the created todo.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Todo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /todos/{id}:
    delete:
      operationId: deleteTodo
      security: 
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The ID of the todo to delete.
          required: true
          schema: 
            type: string
      responses:
        '204':
          description: A success response with no content.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
# Todo schemas
    Todo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
      required: [title]
# User schemas
    NewUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    UserToken:
      type: object
      properties:
        value:
          type: string
      required: [value]
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
